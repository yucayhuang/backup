（一）Socket(套接字)UDP协议的特点
1、是基于无连接的协议，没有生成连接的延迟所以速度比TCP快；
2、支持一对一和一对多连接，可以使用广播的方式多地址发送；
3、与Tcp的报头比是8：20，所以UDP消耗的网络带宽少；
4、传输的数据有消息边界，Tcp没有；




（二）发送
//定义发送字节区  
        byteSendingArray = new byte[100];  
        //定义网络地址  
        iep = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 1001);  
        //创建socket  
        socketClient = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);     
        //发送数据  
        EndPoint ep = (EndPoint)iep;  
  
        string strMsg = "要发送的数据";  
        //字节转换  
        byteSendingArray = Encoding.Default.GetBytes(strMsg);  
        //发送  
        socketClient.SendTo(byteSendingArray, ep);  


（三）接收
//定义接受数据区  
        byteArray_Receive = new byte[100];  
        //定义网络地址  
        iep_Recieve = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 1001);  
        //创建socket  
        socketServer = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);  
        //绑定地址  
        socketServer.Bind(iep_Recieve);  
        //接受数据  
        EndPoint ep = (EndPoint)iep_Recieve;  
        //接收到数据  
        int intReceiveLength = socketServer.ReceiveFrom(byteArray_Receive, ref ep);  
        //转换数据为字符串  
        string strReceiveStr = Encoding.Default.GetString(byteArray_Receive, 0, intReceiveLength);  
             

















首先，用Unity新建两个项目，然后一个写Server，另一个写Client。`using UnityEngine; 
using System.Collections; 
//引入库 
using System.Net; 
using System.Net.Sockets; 
using System.Text; 
using System.Threading;

public class UdpServer : MonoBehaviour 
{ 
//以下默认都是私有的成员 
Socket socket; //目标socket 
EndPoint clientEnd; //客户端 
IPEndPoint ipEnd; //侦听端口 
string recvStr; //接收的字符串 
string sendStr; //发送的字符串 
byte[] recvData = new byte[1024]; //接收的数据，必须为字节 
byte[] sendData = new byte[1024]; //发送的数据，必须为字节 
int recvLen; //接收的数据长度 
Thread connectThread; //连接线程

//初始化
void InitSocket()
{
    //定义侦听端口,侦听任何IP
    ipEnd = new IPEndPoint(IPAddress.Any, 8001);
    //定义套接字类型,在主线程中定义
    socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
    //服务端需要绑定ip
    socket.Bind(ipEnd);
    //定义客户端
    IPEndPoint sender = new IPEndPoint(IPAddress.Any, 0);
    clientEnd = (EndPoint)sender;
    print("waiting for UDP dgram");

    //开启一个线程连接，必须的，否则主线程卡死
    connectThread = new Thread(new ThreadStart(SocketReceive));
    connectThread.Start();
}

void SocketSend(string sendStr)
{
    //清空发送缓存
    sendData = new byte[1024];
    //数据类型转换
    sendData = Encoding.ASCII.GetBytes(sendStr);
    //发送给指定客户端
    socket.SendTo(sendData, sendData.Length, SocketFlags.None, clientEnd);
}

//服务器接收
void SocketReceive()
{
    //进入接收循环
    while (true)
    {
        //对data清零
        recvData = new byte[1024];
        //获取客户端，获取客户端数据，用引用给客户端赋值
        recvLen = socket.ReceiveFrom(recvData, ref clientEnd);
        print("message from: " + clientEnd.ToString()); //打印客户端信息
        //输出接收到的数据
        recvStr = Encoding.ASCII.GetString(recvData, 0, recvLen);
        print("我是服务器，接收到客户端的数据"+recvStr);
        //将接收到的数据经过处理再发送出去
        sendStr = "From Server: " + recvStr;
        SocketSend(sendStr);
    }
}

//连接关闭
void SocketQuit()
{
    //关闭线程
    if (connectThread != null)
    {
        connectThread.Interrupt();
        connectThread.Abort();
    }
    //最后关闭socket
    if (socket != null)
        socket.Close();
    print("disconnect");
}

// Use this for initialization
void Start()
{
    InitSocket(); //在这里初始化server
}
void OnApplicationQuit()
{
    SocketQuit();
}
} 
`上面代码是Server，然后把它绑定在相机上，

“` 
using UnityEngine; 
using System.Collections; 
//引入库 
using System.Net; 
using System.Net.Sockets; 
using System.Text; 
using System.Threading;

public class UdpClient : MonoBehaviour 
{ 
string editString = “hello wolrd”; //编辑框文字

//以下默认都是私有的成员
Socket socket; //目标socket
EndPoint serverEnd; //服务端
IPEndPoint ipEnd; //服务端端口
string recvStr; //接收的字符串
string sendStr; //发送的字符串
byte[] recvData = new byte[1024]; //接收的数据，必须为字节
byte[] sendData = new byte[1024]; //发送的数据，必须为字节
int recvLen; //接收的数据长度
Thread connectThread; //连接线程

//初始化
void InitSocket()
{
    //定义连接的服务器ip和端口，可以是本机ip，局域网，互联网
    ipEnd = new IPEndPoint(IPAddress.Parse("192.168.1.110"), 8001);
    //定义套接字类型,在主线程中定义
    socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
    //定义服务端
    IPEndPoint sender = new IPEndPoint(IPAddress.Any, 0);
    serverEnd = (EndPoint)sender;
    print("waiting for sending UDP dgram");

    //建立初始连接，这句非常重要，第一次连接初始化了serverEnd后面才能收到消息
    SocketSend("hello");

    //开启一个线程连接，必须的，否则主线程卡死
    connectThread = new Thread(new ThreadStart(SocketReceive));
    connectThread.Start();
}

void SocketSend(string sendStr)
{
    //清空发送缓存
    sendData = new byte[1024];
    //数据类型转换
    sendData = Encoding.ASCII.GetBytes(sendStr);
    //发送给指定服务端
    socket.SendTo(sendData, sendData.Length, SocketFlags.None, ipEnd);
}

//服务器接收
void SocketReceive()
{
    //进入接收循环
    while (true)
    {
        //对data清零
        recvData = new byte[1024];
        //获取客户端，获取服务端端数据，用引用给服务端赋值，实际上服务端已经定义好并不需要赋值
        recvLen = socket.ReceiveFrom(recvData, ref serverEnd);
        print("message from: " + serverEnd.ToString()); //打印服务端信息
        //输出接收到的数据
        recvStr = Encoding.ASCII.GetString(recvData, 0, recvLen);
        print("我是客户端，接收到服务器的数据"+recvStr);
    }
}

//连接关闭
void SocketQuit()
{
    //关闭线程
    if (connectThread != null)
    {
        connectThread.Interrupt();
        connectThread.Abort();
    }
    //最后关闭socket
    if (socket != null)
        socket.Close();
}

// Use this for initialization
void Start()
{
    InitSocket(); //在这里初始化
}

void OnGUI()
{
    editString = GUI.TextField(new Rect(10, 10, 100, 20), editString);
    if (GUI.Button(new Rect(10, 30, 60, 20), "send"))
        SocketSend(editString);
}

// Update is called once per frame
void Update()
{

}

void OnApplicationQuit()
{
    SocketQuit();
}
}

“`这个是Client的，但是记得修改InitSocket（）方法中的ip，改为你自己的Ip。
































TCP------------------------------------------------------------------------------------------


unity内部封装了一个很高层次的网络接口，不过有时候并不需要那么复杂的功能，只是想实现简单的TCP网络连接，可以在unity里面用C#写tcp socket。
以下TCP连接是同步模式。

建立两个unity工程，编写脚本。

服务端
[csharp] view plain copy print?
using UnityEngine;  
using System.Collections;  
//引入库  
using System.Net;  
using System.Net.Sockets;  
using System.Text;  
using System.Threading;  
  
public class TcpServer:MonoBehaviour  
{  
    //以下默认都是私有的成员  
    Socket serverSocket; //服务器端socket  
    Socket clientSocket; //客户端socket  
    IPEndPoint ipEnd; //侦听端口  
    string recvStr; //接收的字符串  
    string sendStr; //发送的字符串  
    byte[] recvData=new byte[1024]; //接收的数据，必须为字节  
    byte[] sendData=new byte[1024]; //发送的数据，必须为字节  
    int recvLen; //接收的数据长度  
    Thread connectThread; //连接线程  
  
    //初始化  
    void InitSocket()  
    {  
        //定义侦听端口,侦听任何IP  
        ipEnd=new IPEndPoint(IPAddress.Any,5566);  
        //定义套接字类型,在主线程中定义  
        serverSocket=new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);  
        //连接  
        serverSocket.Bind(ipEnd);  
        //开始侦听,最大10个连接  
        serverSocket.Listen(10);  
  
          
               
        //开启一个线程连接，必须的，否则主线程卡死  
        connectThread=new Thread(new ThreadStart(SocketReceive));  
        connectThread.Start();  
    }  
  
    //连接  
    void SocketConnet()  
    {  
        if(clientSocket!=null)  
            clientSocket.Close();  
        //控制台输出侦听状态  
        print("Waiting for a client");  
        //一旦接受连接，创建一个客户端  
        clientSocket=serverSocket.Accept();  
        //获取客户端的IP和端口  
        IPEndPoint ipEndClient=(IPEndPoint)clientSocket.RemoteEndPoint;  
        //输出客户端的IP和端口  
        print("Connect with "+ipEndClient.Address.ToString()+":"+ipEndClient.Port.ToString());  
        //连接成功则发送数据  
        sendStr="Welcome to my server";  
        SocketSend(sendStr);  
    }  
  
    void SocketSend(string sendStr)  
    {  
        //清空发送缓存  
        sendData=new byte[1024];  
        //数据类型转换  
        sendData=Encoding.ASCII.GetBytes(sendStr);  
        //发送  
        clientSocket.Send(sendData,sendData.Length,SocketFlags.None);  
    }  
  
    //服务器接收  
    void SocketReceive()  
    {  
        //连接  
        SocketConnet();        
        //进入接收循环  
        while(true)  
        {  
            //对data清零  
            recvData=new byte[1024];  
            //获取收到的数据的长度  
            recvLen=clientSocket.Receive(recvData);  
            //如果收到的数据长度为0，则重连并进入下一个循环  
            if(recvLen==0)  
            {  
                SocketConnet();  
                continue;  
            }  
            //输出接收到的数据  
            recvStr=Encoding.ASCII.GetString(recvData,0,recvLen);  
            print(recvStr);  
            //将接收到的数据经过处理再发送出去  
            sendStr="From Server: "+recvStr;  
            SocketSend(sendStr);  
        }  
    }  
  
    //连接关闭  
    void SocketQuit()  
    {  
        //先关闭客户端  
        if(clientSocket!=null)  
            clientSocket.Close();  
        //再关闭线程  
        if(connectThread!=null)  
        {  
            connectThread.Interrupt();  
            connectThread.Abort();  
        }  
        //最后关闭服务器  
        serverSocket.Close();  
        print("diconnect");  
    }  
  
    // Use this for initialization  
    void Start()  
    {  
        InitSocket(); //在这里初始化server  
    }  
  
  
    // Update is called once per frame  
    void Update()  
    {  
  
    }  
  
    void OnApplicationQuit()  
    {  
        SocketQuit();  
    }  
}  

创建套接字
绑定套接字到ip和端口
侦听连接
接收连接
与客户端收发数据
返回等待另一连接
断开连接
把脚本挂到unity场景中某个物体上，比如camera，由于创建连接后有接收循环，所以要单独开一个线程，否则主线程会卡死。

客户端
[csharp] view plain copy print?
using UnityEngine;  
using System.Collections;  
//引入库  
using System.Net;  
using System.Net.Sockets;  
using System.Text;  
using System.Threading;  
  
public class TcpClient:MonoBehaviour  
{  
    string editString="hello wolrd"; //编辑框文字  
  
    Socket serverSocket; //服务器端socket  
    IPAddress ip; //主机ip  
    IPEndPoint ipEnd;   
    string recvStr; //接收的字符串  
    string sendStr; //发送的字符串  
    byte[] recvData=new byte[1024]; //接收的数据，必须为字节  
    byte[] sendData=new byte[1024]; //发送的数据，必须为字节  
    int recvLen; //接收的数据长度  
    Thread connectThread; //连接线程  
  
    //初始化  
    void InitSocket()  
    {  
        //定义服务器的IP和端口，端口与服务器对应  
        ip=IPAddress.Parse("127.0.0.1"); //可以是局域网或互联网ip，此处是本机  
        ipEnd=new IPEndPoint(ip,5566);  
          
          
        //开启一个线程连接，必须的，否则主线程卡死  
        connectThread=new Thread(new ThreadStart(SocketReceive));  
        connectThread.Start();  
    }  
  
    void SocketConnet()  
    {  
        if(serverSocket!=null)  
            serverSocket.Close();  
        //定义套接字类型,必须在子线程中定义  
        serverSocket=new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);  
        print("ready to connect");  
        //连接  
        serverSocket.Connect(ipEnd);  
  
        //输出初次连接收到的字符串  
        recvLen=serverSocket.Receive(recvData);  
        recvStr=Encoding.ASCII.GetString(recvData,0,recvLen);  
        print(recvStr);  
    }  
  
    void SocketSend(string sendStr)  
    {  
        //清空发送缓存  
        sendData=new byte[1024];  
        //数据类型转换  
        sendData=Encoding.ASCII.GetBytes(sendStr);  
        //发送  
        serverSocket.Send(sendData,sendData.Length,SocketFlags.None);  
    }  
  
    void SocketReceive()  
    {  
        SocketConnet();  
        //不断接收服务器发来的数据  
        while(true)  
        {  
            recvData=new byte[1024];  
            recvLen=serverSocket.Receive(recvData);  
            if(recvLen==0)  
            {  
                SocketConnet();  
                continue;  
            }  
            recvStr=Encoding.ASCII.GetString(recvData,0,recvLen);  
            print(recvStr);  
        }  
    }  
  
    void SocketQuit()  
    {  
        //关闭线程  
        if(connectThread!=null)  
        {  
            connectThread.Interrupt();  
            connectThread.Abort();  
        }  
        //最后关闭服务器  
        if(serverSocket!=null)  
            serverSocket.Close();  
        print("diconnect");  
    }  
  
    // Use this for initialization  
    void Start()  
    {  
        InitSocket();  
    }  
  
    void OnGUI()  
    {  
        editString=GUI.TextField(new Rect(10,10,100,20),editString);  
        if(GUI.Button(new Rect(10,30,60,20),"send"))  
            SocketSend(editString);  
    }  
  
    // Update is called once per frame  
    void Update()  
    {  
  
    }  
  
    //程序退出则关闭连接  
    void OnApplicationQuit()  
    {  
        SocketQuit();  
    }  
}  
创建套接字
向服务器发出连接请求
和服务器通信
断开连接
同样把脚本挂到场景某个物体中，创建连接和接收循环都放在新开的线程里面，在界面上放一个文字编辑框和一个button用于给服务端发消息。
